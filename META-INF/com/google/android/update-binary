#!/sbin/sh
# arg 1 is recovery api version, generally 3.
# arg 2 is the pipe fd, to the recovery binary.
# communicate with it using the recovery api.
# arg 3 is the zip file

OUTFD=$2
FILE=$3
POS=${FILE%/*}
MARK=$RANDOM

ui_print() {
	echo -n -e "ui_print $1\n" > /proc/self/fd/$OUTFD
	echo -n -e "ui_print\n" > /proc/self/fd/$OUTFD
}

extract_image() {
  NAME=$(i=$(echo ${1##*/});echo ${i%.img})
  PARTITION=${2##*/}

  ui_print 'Found '$NAME' image...'
  rm -rf /cache/$NAME.$MARK
  mkdir /cache/$NAME.$MARK
  umount $2
  mount -o rw $2 /cache/$NAME.$MARK
  if ! echo $NAME | grep -q 'addon.'; then
    ui_print 'Wiping '$PARTITION' partition...'
    cd /cache/$NAME.$MARK
    rm -rf * .[!.]*
    cd /cache/
  fi
  rm -rf /cache/$MARK
  mkdir /cache/$MARK
  mount $1 /cache/$MARK
  if [ $? == 0 ]; then
    ui_print 'Installing standard '$NAME' image...'
    cd /cache/$MARK/
    cp -af * .[!.]* /cache/$NAME.$MARK
    cd /cache/
    umount /cache/$MARK
  else
    ui_print 'Installing tarball '$NAME' image...'
    cd /cache/$NAME.$MARK
	tar --overwrite -xf $1
    cd /cache/
  fi
  if echo $NAME | grep -q 'addon.'; then
    if [ -f /cache/$NAME.$MARK/to_delete ]; then
      ui_print 'Delete list found...'
      for j in `cat /cache/$NAME.$MARK/to_delete`; do
        ui_print 'Deleting '$j'...'
	    rm -rf $j
	  done
	  rm -f /cache/$NAME.$MARK/to_delete
    fi
  fi
  umount /cache/$NAME.$MARK
  rmdir /cache/$MARK
  rmdir /cache/$NAME.$MARK
}

ui_print 'Welcome to MaxFu Flasher for Galaxy S4 Duos...'

ui_print 'Mounting cache...'
mount /cache

if [ ! -d $POS/backup ]; then
  mkdir $POS/backup
fi

ui_print 'Backing up efs partitions to '$POS'/backup...'
rm -rf /cache/$MARK
mkdir /cache/$MARK
mount /dev/block/mmcblk0p3 /cache/$MARK
cd /cache/$MARK/
tar -caf $POS/backup/efs.$MARK.img * .[!.]*
cd /cache/
umount /cache/$MARK
mount /dev/block/mmcblk0p23 /cache/$MARK/
cd /cache/$MARK/
tar -caf $POS/backup/efs_gsm.$MARK.img * .[!.]*
cd /cache/
umount /cache/$MARK

ui_print 'Looking for files in '$POS'...'

if [ -f $POS/system.img ]; then
  extract_image $POS/system.img /dev/block/mmcblk0p20
fi

if ls $POS/*.img | grep -q addon.*.img; then
  for i in `ls $POS/addon.*.img`; do
    extract_image $i /dev/block/mmcblk0p20
  done
fi

if [ -f $POS/boot.img ]; then
  ui_print 'Found boot image...'
  ui_print 'Installing...'
  dd if=$POS/boot.img of=/dev/block/mmcblk0p9
fi

if [ -f $POS/recovery.img ]; then
  ui_print 'Found recovery image...'
  ui_print 'Installing...'
  dd if=$POS/recovery.img of=/dev/block/mmcblk0p10
fi

if [ -f $POS/efs.img ]; then
  extract_image $POS/efs.img /dev/block/mmcblk0p3
fi

if [ -f $POS/efs_gsm.img ]; then
  extract_image $POS/efs_gsm.img /dev/block/mmcblk0p23
fi

if [ -f $POS/modem.bin ]; then
  ui_print 'Found modem image...'
  ui_print 'Installing...'
  dd if=$POS/modem.bin of=/dev/block/mmcblk0p13
fi

if [ -f $POS/esc_modem.bin ]; then
  ui_print 'Found esc_modem image...'
  ui_print 'Installing...'
  dd if=$POS/esc_modem.bin of=/dev/block/mmcblk0p22
fi

ui_print 'Finished...'
